<?php
namespace Elastification\Client\Serializer;

use Elastification\Client\Serializer\Gateway\GatewayInterface;
use JMS\Serializer\DeserializationContext;
use JMS\Serializer\SerializationContext;
use JMS\Serializer\Serializer;

/**
 * @package Elastification\Client\Serializer
 * @author Mario Mueller
 * @since 2014-08-15
 * @version 1.0.0
 */
class JmsSerializer implements SerializerInterface
{
    /**
     * @var string
     */
    const SERIALIZER_FORMAT = 'json';

    /**
     * This class is used to deserialize the response.
     * This entity should only care about the elasticsearch part of the
     * response, not about the source part or the results underneath hits->hits.
     *
     * @var string
     */
    private $deserializerClass = 'Elastification\Client\Serializer\JmsSerializer\SearchResponseEntity';

    /**
     * @var Serializer
     */
    private $jms;

    /**
     * If you use the custom handler hook via the JMS Type Annotation in the deserializerClass,
     * this is the class that is used by default.
     *
     * @example: @JMS\Type("SourceType<MySourceDeSerClass>")
     *
     * @var string
     */
    private $sourceClassName;

    /**
     * @var SerializationContext
     */
    private $jmsSerializeContext;

    /**
     * @var DeserializationContext
     */
    private $jmsDeserializeContext;

    /**
     * @param Serializer $jms
     * @param string $sourceClassName
     */
    function __construct(Serializer $jms, $sourceClassName)
    {
        $this->jms = $jms;
        $this->sourceClassName = $sourceClassName;
    }

    /**
     * Serializes given data to string
     *
     * @param mixed $data
     * @param array $params
     * @return string
     */
    public function serialize($data, array $params = array())
    {
        $ctx = null;
        if ($this->jmsSerializeContext != null) {
            // We need to clone it as jms contexts are not reusable.
            $ctx = clone $this->jmsSerializeContext;
        }
        return $this->jms->serialize($data, self::SERIALIZER_FORMAT, $ctx);
    }

    /**
     * Deserializes given data to array or object
     *
     * @param string $data
     * @param array $params
     * @return GatewayInterface
     */
    public function deserialize($data, array $params = array())
    {
        $ctx = null;
        if ($this->jmsDeserializeContext != null) {
            // We need to clone it as jms contexts are not reusable.
            $ctx = clone $this->jmsDeserializeContext;
        }
        return $this->jms->deserialize($data, $this->deserializerClass, $ctx);
    }

    /**
     * @return SerializationContext
     * @author Mario Mueller (autogenerated code)
     */
    public function getJmsSerializeContext()
    {
        return $this->jmsSerializeContext;
    }

    /**
     * @param SerializationContext $jmsContext
     * @return void
     * @author Mario Mueller (autogenerated code)
     */
    public function setJmsSerializeContext(SerializationContext $jmsContext)
    {
        $this->jmsSerializeContext = $jmsContext;
    }

    /**
     * @return DeserializationContext
     * @author Mario Mueller (autogenerated code)
     */
    public function getJmsDeserializeContext()
    {
        return $this->jmsDeserializeContext;
    }

    /**
     * @param DeserializationContext $jmsDeserializeContext
     * @return void
     * @author Mario Mueller (autogenerated code)
     */
    public function setJmsDeserializeContext($jmsDeserializeContext)
    {
        $this->jmsDeserializeContext = $jmsDeserializeContext;
    }

    /**
     * @return mixed
     * @author Mario Mueller (autogenerated code)
     */
    public function getDeserializerClass()
    {
        return $this->deserializerClass;
    }

    /**
     * @param mixed $deserializerClass
     * @return void
     * @author Mario Mueller (autogenerated code)
     */
    public function setDeserializerClass($deserializerClass)
    {
        $this->deserializerClass = $deserializerClass;
    }

    /**
     * @return string
     * @author Mario Mueller (autogenerated code)
     */
    public function getSourceClassName()
    {
        return $this->sourceClassName;
    }

    /**
     * @param string $sourceClassName
     * @return void
     * @author Mario Mueller (autogenerated code)
     */
    public function setSourceClassName($sourceClassName)
    {
        $this->sourceClassName = $sourceClassName;
    }
}
